const {Telegraf} = require('telegraf');

// Replace with your new token from BotFather
const bot = new Telegraf('YOUR_NEW_BOT_TOKEN_HERE');

// Replace with your GitHub Pages URL
const GAME_URL = 'https://yourusername.github.io/your-repo-name/';
const GAME_SHORT_NAME = 'infinity_runner'; // or your game's short name from BotFather

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
    ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Infinity Runner! –ë–µ–≥–∏—Ç–µ, —Å–æ–±–∏—Ä–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã –∏ —É–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.', {
        reply_markup: {
            inline_keyboard: [
                [{text: 'üéÆ –ò–ì–†–ê–¢–¨', callback_game: GAME_SHORT_NAME}],
                [{text: 'üèÜ –†–µ–∫–æ—Ä–¥—ã', callback_data: 'highscore'}],
                [{text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help'}]
            ]
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /play
bot.command('play', (ctx) => {
    ctx.replyWithGame(GAME_SHORT_NAME);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /highscore
bot.command('highscore', async (ctx) => {
    showHighScores(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', (ctx) => {
    showHelp(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –∏–≥—Ä—ã
bot.on('callback_query', async (ctx) => {
    const callbackQuery = ctx.callbackQuery;

    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    if (callbackQuery.game_short_name === GAME_SHORT_NAME) {
        ctx.answerGameQuery(GAME_URL);
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–æ—Ä–¥—ã
    else if (callbackQuery.data === 'highscore') {
        showHighScores(ctx);
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å
    else if (callbackQuery.data === 'help') {
        showHelp(ctx);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–æ–≤
async function showHighScores(ctx) {
    try {
        const userId = ctx.from.id;
        const highScores = await ctx.getGameHighScores(userId, GAME_SHORT_NAME);

        if (highScores && highScores.length > 0) {
            const userScore = highScores[0].score;
            ctx.reply(`üèÜ –í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${userScore} –æ—á–∫–æ–≤!`);

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã
            try {
                ctx.reply('üåç –¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ –º–∏—Ä–∞:');

                let message = '';
                for (let i = 0; i < Math.min(5, highScores.length); i++) {
                    const score = highScores[i];
                    message += `${i + 1}. ${score.user.first_name}: ${score.score} –æ—á–∫–æ–≤\n`;
                }

                ctx.reply(message || '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–æ—Ä–¥–∞—Ö.');
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤:', error);
            }
        } else {
            ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤. –°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ä–µ–∫–æ—Ä–¥!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
function showHelp(ctx) {
    ctx.reply(
        `üìã –ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ Infinity Runner:

üèÉ‚Äç‚ôÇÔ∏è –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∂–∏—Ç –≤–ø–µ—Ä—ë–¥
ü¶ò –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω –∏–ª–∏ –ø—Ä–æ–±–µ–ª –¥–ª—è –ø—Ä—ã–∂–∫–∞
ü™ô –°–æ–±–∏—Ä–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
üöß –ü–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
üí™ –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–µ–∂–¥—É –∑–∞–±–µ–≥–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/highscore - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ—Ä–¥—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`
    );
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));